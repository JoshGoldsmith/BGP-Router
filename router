#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, asn, networks):
    self.asn = asn
    self.routes = [] # Routing Table (list of dictionaries containing routing info)
    self.updates = []
    self.revokes = []
    self.relations = {}
    self.sockets = {}
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    # TODO
    outroutes = []
    for entry in self.routes:
      netmask = entry[NMSK]
      network = entry[NTWK]
      network_split = network.split('.')
      netmask_split = netmask.split('.')
      address_split = daddr.split('.')
      
      match = True
      for i in range(len(netmask_split)):
        if netmask_split[i] == '255':
          if not network_split[i] == address_split[i]:
            match = False
            continue

      if match:
        outroutes.append(entry)

    return outroutes

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    as_length = 100 
    for entry in routes:
      if as_length > len(entry[APTH]):
        as_length = len(entry[APTH])

    for entry in routes:
      if as_length == len(entry[APTH]):
        outroutes.append(entry)
    return outroutes

  def get_highest_preference(self, routes):
    """ select the route with the highest localpref """
    # TODO
    highest_lpref = 0
    outroutes = []
    for entry in routes:
      if entry[LPRF] > highest_lpref:
        highest_lpref = entry[LPRF]
    
    for entry in routes:
      if entry[LPRF] == highest_lpref:
        outroutes.append(entry)
    
    return outroutes

  def get_self_origin(self, routes):
    """ select self originating routes """
    # TODO
    outroutes = []
    for entry in routes:
      if entry[SORG]:
        outroutes.append(entry)
    if not outroutes:
      for entry in routes:
        outroutes.append(entry)
    return outroutes

  def get_origin_routes(self, routes):
    """ select origin routes: EGP > IGP > UNK """
    #assuming they meant IGP > EGP > UNK
    # TODO
    outroutes = []
    for entry in routes:
      if entry[ORIG] == "IGP":
        outroutes.append(entry)
    if len(outroutes) != 0:
      return outroutes
    for entry in routes:
      if entry[ORIG] == "EGP":
        outroutes.append(entry)
    if len(outroutes) != 0:
      return outroutes
    for entry in routes:
      if entry[ORIG] == "UNK":
        outroutes.append(entry)
    return outroutes

  # return 1 if the first of two split ips is lower, 2 if the second is (return 1 if equal)
  def compare_split_ips(self, first, second):
    for i in range(len(first)):
      if i > len(second):
        return 2
      if first[i] < second[i]:
        return 1
      if second[i] < first[i]:
        return 2

    return 1

  def get_lowest_ip(self, routes):
    #only checks first # in ip address. should probably be changed
    ips = []
    ips_split = []
    #index of lowest ip in list
    lowest = 0

    for entry in routes:
      ips.append(entry[PEER])
    for ip in ips:
      ips_split.append(ip.split('.'))
    for index in range(len(ips_split)):
        if self.compare_split_ips(ips_split[lowest], ips_split[index]) == 2:
          lowest = index

    return [routes[lowest]]

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = routes
#    for entry in routes:
#        for neighbor in self.relations:
#            if entry[NTWK] == neighbor[NTWK]:
#                if entry[TYPE] == "peer" && neighbor
    return outroutes

  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    # TODO
    peer = None
    routes = self.lookup_routes(daddr)
    # Rules go here
    if routes:
      # 1. Highest Preference
      routes = self.get_highest_preference(routes)
      # 2. Self Origin
      routes = self.get_self_origin(routes)
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes)
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes)
      # 5. Lowest IP Address
      # TODO
      routes = self.get_lowest_ip(routes)
      # Final check: enforce peering relationships
      routes = self.filter_relationships(srcif, routes)
    if not routes:
      return []
    peer = routes[0][PEER]
    #return self.sockets[peer] if peer else None
    return peer
  def forward(self, srcif, packet):
    """ Forward a data packet """
    # TODO
    check = self.get_route(srcif, packet[DEST])
    if not check:
      self.send_error(srcif, {})
    else:
      
      packet_convert = bytes(json.dumps(packet), 'ascii')
      self.sockets[check].sendall(packet_convert)

    return True

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False

  def update(self, srcif, packet):
    """ handle update packets """
    # TODO
    new_apath = packet[MESG][APTH]
    new_apath.append(self.asn)
    update_info = {NTWK: packet[MESG][NTWK],
                   NMSK: packet[MESG][NMSK],
                   LPRF: packet[MESG][LPRF],
                   SORG: packet[MESG][SORG],
                   APTH: new_apath,
                   ORIG: packet[MESG][ORIG]}
    self.updates.append(update_info)

    route_info = update_info
    route_info[PEER] = srcif
    self.routes.append(route_info)

    for network in self.sockets:
      if network == srcif:
        continue
      new_packet = {SRCE: network[:-1] + '1',
                    DEST: network,
                    TYPE: UPDT,
                    MESG: update_info}



      new_packet_convert = bytes(json.dumps(new_packet), 'ascii')
      
      self.sockets[network[:-1] + '2'].sendall(new_packet_convert)

    return True

  def revoke(self, srcif, packet):
    """ handle revoke packets """
    
    for item in packet[MESG]:
      revoke_info = {NTWK: item[NTWK],
                     NMSK: item[NMSK]}
      self.revokes.append(revoke_info)
      indexes_to_del = []
      for index in range(len(self.routes)):
        if self.routes[index][NTWK] == revoke_info[NTWK] and self.routes[index][NMSK] == revoke_info[NMSK] and self.routes[index][PEER] == srcif:
          indexes_to_del.insert(0, index)
      
      for i in indexes_to_del:
        del self.routes[i]
    for network in self.sockets:
      if network == srcif:
        continue
      new_packet = {SRCE: network[:-1] + '1',
                    DEST: network,
                    TYPE: RVKE,
                    MESG: packet[MESG]}



      new_packet_convert = bytes(json.dumps(new_packet), 'ascii')
      
      self.sockets[network[:-1] + '2'].sendall(new_packet_convert)



    return True

  def dump(self, packet):
    """ handles dump table requests """
    msg = []
    response = {SRCE: packet[DEST], DEST: packet[SRCE], TYPE: 'table'}
    for entry in self.routes:
      row = {NTWK: entry[NTWK], NMSK: entry[NMSK], PEER: entry[PEER]}
      msg.append(row)
    response[MESG] = msg
    response_convert = bytes(json.dumps(response), 'ascii')
    self.sockets[packet[SRCE][:-1] + '2'].sendall(response_convert)
    return True

  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    if packet[TYPE] == UPDT:
      return self.update(srcif, packet)
    elif packet[TYPE] == DATA:
      return self.forward(srcif, packet)
    elif packet[TYPE] == RVKE:
      return self.revoke(srcif, packet)
    elif packet[TYPE] == DUMP:
      return self.dump(packet)
    else:
        return False
    

  def send_error(self, conn, msg):
    """ Send a no_route error message """
    # TODO
    no_route = {SRCE: conn[:-1] + '1',
                DEST: conn,
                TYPE: NRTE,
                MESG: msg}

    no_route_convert = bytes(json.dumps(no_route), 'ascii')
    self.sockets[no_route[DEST]].sendall(no_route_convert)
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', type=int)
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.asn, ARGS.networks).run()
